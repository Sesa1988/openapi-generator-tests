/*
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 *
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * OpenAPI spec version: V3.0.1_SSP-001
 * Contact: info@idtwin.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
  
          /// <summary>
          /// Gets or Sets DataTypeDefXsd
          /// </summary>
          [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
          public enum DataTypeDefXsd
          {
              /// <summary>
              /// Enum AnyURIEnum for xs:anyURI
              /// </summary>
              [EnumMember(Value = "xs:anyURI")]
              AnyURIEnum = 0,
              /// <summary>
              /// Enum Base64BinaryEnum for xs:base64Binary
              /// </summary>
              [EnumMember(Value = "xs:base64Binary")]
              Base64BinaryEnum = 1,
              /// <summary>
              /// Enum BooleanEnum for xs:boolean
              /// </summary>
              [EnumMember(Value = "xs:boolean")]
              BooleanEnum = 2,
              /// <summary>
              /// Enum ByteEnum for xs:byte
              /// </summary>
              [EnumMember(Value = "xs:byte")]
              ByteEnum = 3,
              /// <summary>
              /// Enum DateEnum for xs:date
              /// </summary>
              [EnumMember(Value = "xs:date")]
              DateEnum = 4,
              /// <summary>
              /// Enum DateTimeEnum for xs:dateTime
              /// </summary>
              [EnumMember(Value = "xs:dateTime")]
              DateTimeEnum = 5,
              /// <summary>
              /// Enum DecimalEnum for xs:decimal
              /// </summary>
              [EnumMember(Value = "xs:decimal")]
              DecimalEnum = 6,
              /// <summary>
              /// Enum DoubleEnum for xs:double
              /// </summary>
              [EnumMember(Value = "xs:double")]
              DoubleEnum = 7,
              /// <summary>
              /// Enum DurationEnum for xs:duration
              /// </summary>
              [EnumMember(Value = "xs:duration")]
              DurationEnum = 8,
              /// <summary>
              /// Enum FloatEnum for xs:float
              /// </summary>
              [EnumMember(Value = "xs:float")]
              FloatEnum = 9,
              /// <summary>
              /// Enum GDayEnum for xs:gDay
              /// </summary>
              [EnumMember(Value = "xs:gDay")]
              GDayEnum = 10,
              /// <summary>
              /// Enum GMonthEnum for xs:gMonth
              /// </summary>
              [EnumMember(Value = "xs:gMonth")]
              GMonthEnum = 11,
              /// <summary>
              /// Enum GMonthDayEnum for xs:gMonthDay
              /// </summary>
              [EnumMember(Value = "xs:gMonthDay")]
              GMonthDayEnum = 12,
              /// <summary>
              /// Enum GYearEnum for xs:gYear
              /// </summary>
              [EnumMember(Value = "xs:gYear")]
              GYearEnum = 13,
              /// <summary>
              /// Enum GYearMonthEnum for xs:gYearMonth
              /// </summary>
              [EnumMember(Value = "xs:gYearMonth")]
              GYearMonthEnum = 14,
              /// <summary>
              /// Enum HexBinaryEnum for xs:hexBinary
              /// </summary>
              [EnumMember(Value = "xs:hexBinary")]
              HexBinaryEnum = 15,
              /// <summary>
              /// Enum IntEnum for xs:int
              /// </summary>
              [EnumMember(Value = "xs:int")]
              IntEnum = 16,
              /// <summary>
              /// Enum IntegerEnum for xs:integer
              /// </summary>
              [EnumMember(Value = "xs:integer")]
              IntegerEnum = 17,
              /// <summary>
              /// Enum LongEnum for xs:long
              /// </summary>
              [EnumMember(Value = "xs:long")]
              LongEnum = 18,
              /// <summary>
              /// Enum NegativeIntegerEnum for xs:negativeInteger
              /// </summary>
              [EnumMember(Value = "xs:negativeInteger")]
              NegativeIntegerEnum = 19,
              /// <summary>
              /// Enum NonNegativeIntegerEnum for xs:nonNegativeInteger
              /// </summary>
              [EnumMember(Value = "xs:nonNegativeInteger")]
              NonNegativeIntegerEnum = 20,
              /// <summary>
              /// Enum NonPositiveIntegerEnum for xs:nonPositiveInteger
              /// </summary>
              [EnumMember(Value = "xs:nonPositiveInteger")]
              NonPositiveIntegerEnum = 21,
              /// <summary>
              /// Enum PositiveIntegerEnum for xs:positiveInteger
              /// </summary>
              [EnumMember(Value = "xs:positiveInteger")]
              PositiveIntegerEnum = 22,
              /// <summary>
              /// Enum ShortEnum for xs:short
              /// </summary>
              [EnumMember(Value = "xs:short")]
              ShortEnum = 23,
              /// <summary>
              /// Enum StringEnum for xs:string
              /// </summary>
              [EnumMember(Value = "xs:string")]
              StringEnum = 24,
              /// <summary>
              /// Enum TimeEnum for xs:time
              /// </summary>
              [EnumMember(Value = "xs:time")]
              TimeEnum = 25,
              /// <summary>
              /// Enum UnsignedByteEnum for xs:unsignedByte
              /// </summary>
              [EnumMember(Value = "xs:unsignedByte")]
              UnsignedByteEnum = 26,
              /// <summary>
              /// Enum UnsignedIntEnum for xs:unsignedInt
              /// </summary>
              [EnumMember(Value = "xs:unsignedInt")]
              UnsignedIntEnum = 27,
              /// <summary>
              /// Enum UnsignedLongEnum for xs:unsignedLong
              /// </summary>
              [EnumMember(Value = "xs:unsignedLong")]
              UnsignedLongEnum = 28,
              /// <summary>
              /// Enum UnsignedShortEnum for xs:unsignedShort
              /// </summary>
              [EnumMember(Value = "xs:unsignedShort")]
              UnsignedShortEnum = 29          }
}
