/*
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 *
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * OpenAPI spec version: V3.0.1_SSP-001
 * Contact: info@idtwin.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SubmodelElementList : SubmodelElement, IEquatable<SubmodelElementList>, SubmodelElementChoice 
    { 
        /// <summary>
        /// Gets or Sets OrderRelevant
        /// </summary>

        [DataMember(Name="orderRelevant")]
        public bool? OrderRelevant { get; set; }

        /// <summary>
        /// Gets or Sets SemanticIdListElement
        /// </summary>

        [DataMember(Name="semanticIdListElement")]
        public Reference SemanticIdListElement { get; set; }

        /// <summary>
        /// Gets or Sets TypeValueListElement
        /// </summary>
        [Required]

        [DataMember(Name="typeValueListElement")]
        public AasSubmodelElements TypeValueListElement { get; set; }

        /// <summary>
        /// Gets or Sets ValueTypeListElement
        /// </summary>

        [DataMember(Name="valueTypeListElement")]
        public DataTypeDefXsd ValueTypeListElement { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>

        [DataMember(Name="value")]
        public List<SubmodelElementChoice> Value { get; set; }

        /// <summary>
        /// Gets or Sets ModelType
        /// </summary>
        [RegularExpression("/SubmodelElementList/")]
        [DataMember(Name="modelType")]
        public string ModelType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubmodelElementList {\n");
            sb.Append("  OrderRelevant: ").Append(OrderRelevant).Append("\n");
            sb.Append("  SemanticIdListElement: ").Append(SemanticIdListElement).Append("\n");
            sb.Append("  TypeValueListElement: ").Append(TypeValueListElement).Append("\n");
            sb.Append("  ValueTypeListElement: ").Append(ValueTypeListElement).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ModelType: ").Append(ModelType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubmodelElementList)obj);
        }

        /// <summary>
        /// Returns true if SubmodelElementList instances are equal
        /// </summary>
        /// <param name="other">Instance of SubmodelElementList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubmodelElementList other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OrderRelevant == other.OrderRelevant ||
                    OrderRelevant != null &&
                    OrderRelevant.Equals(other.OrderRelevant)
                ) && 
                (
                    SemanticIdListElement == other.SemanticIdListElement ||
                    SemanticIdListElement != null &&
                    SemanticIdListElement.Equals(other.SemanticIdListElement)
                ) && 
                (
                    TypeValueListElement == other.TypeValueListElement ||
                    TypeValueListElement != null &&
                    TypeValueListElement.Equals(other.TypeValueListElement)
                ) && 
                (
                    ValueTypeListElement == other.ValueTypeListElement ||
                    ValueTypeListElement != null &&
                    ValueTypeListElement.Equals(other.ValueTypeListElement)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.SequenceEqual(other.Value)
                ) && 
                (
                    ModelType == other.ModelType ||
                    ModelType != null &&
                    ModelType.Equals(other.ModelType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OrderRelevant != null)
                    hashCode = hashCode * 59 + OrderRelevant.GetHashCode();
                    if (SemanticIdListElement != null)
                    hashCode = hashCode * 59 + SemanticIdListElement.GetHashCode();
                    if (TypeValueListElement != null)
                    hashCode = hashCode * 59 + TypeValueListElement.GetHashCode();
                    if (ValueTypeListElement != null)
                    hashCode = hashCode * 59 + ValueTypeListElement.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (ModelType != null)
                    hashCode = hashCode * 59 + ModelType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubmodelElementList left, SubmodelElementList right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubmodelElementList left, SubmodelElementList right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
